window.React = require("react")
window.Nimbus = {
	nimbus_url: "http://localhost:6789",
	getYoutubeVideo: function(youtube_id, file_format, callback) {
        var url = this.nimbus_url + "/v2/youtube/" + youtube_id + "." + file_format
		require("reqwest")(url).then(function(response) {
			callback(response)
		})
	}
}

var Viditor = React.createClass({
    render: function() {
        return (
            <div>
                <form onSubmit={this.onSubmit}>
                    <input ref="youtube_id" type="text"/>
                    <input type="submit"/>
                </form>
                <video ref="video" controls>
                    <source src="assets/videos/Ou8ylnnpurA.mp4" type="video/mp4"/>
                    <source src="data:video/mp4;base64,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â€¦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" type="video/mp4"/>
                </video>
            </div>
        )
    },
    onSubmit: function(event) {
        event.preventDefault()
        var youtube_id = this.refs.youtube_id.getDOMNode().value
        Nimbus.getYoutubeVideo(youtube_id, "mp4", function(data) {
            console.log(data)
        }.bind(this))
    }
})

React.render(<Viditor/>, document.body)
